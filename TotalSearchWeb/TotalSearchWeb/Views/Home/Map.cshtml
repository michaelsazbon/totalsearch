@model TotalSearchWeb.Models.SearchViewModel


@using PagedList.Mvc;

@functions{
    public string GetAntiForgeryToken()
    {
        string cookieToken, formToken;
        AntiForgery.GetTokens(null, out cookieToken, out formToken);
        return cookieToken + ":" + formToken;                
    }
}

<!DOCTYPE html>
<html>
  <head>
    <title>Total Search</title>
    <!--<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />-->
    <meta name="viewport" content="width=device-width" />
    <meta charset="utf-8" />
    <link type="text/css" rel="Stylesheet" href="../../Content/PagedList.css" />
    <style type="text/css">
      html, body {
        margin: 0;
        padding: 0;
        height: 100%;
      }
      
      #maincontainer
      {
         
      }
      
      #map-canvas 
      {
         height: 100%; 
      }
      

    .liveExample { padding: 1em; background-color: #EEEEDD; border: 1px solid #CCC; }
    .liveExample input { font-family: Arial; }
    .liveExample b { font-weight: bold; }
    .liveExample p { margin-top: 0.9em; margin-bottom: 0.9em; }
    .liveExample select[multiple] { width: 100%; height: 8em; }
    .liveExample h2 { margin-top: 0.4em; font-weight: bold; font-size: 1.2em; }
    
    
    .ko-grid { margin-bottom: 1em; width: 25em; border: 1px solid silver; background-color:White; }
    .ko-grid th { text-align:left; background-color: Black; color:White; }
    .ko-grid td, th { padding: 0.4em; }
    .ko-grid tr:nth-child(odd) { background-color: #DDD; }
    .ko-grid-pageLinks { margin-bottom: 1em; }
    .ko-grid-pageLinks a { padding: 0.5em; }
    .pager2 a.selected { background-color: Black; color: White; }
    
    #header 
    {
        background-color:#f1f1f1;
        border-bottom: 1px solid #e5e5e5;
        height:30px;
    }
    
    #footer 
    {
        background-color:#f1f1f1;
        /*position: absolute;
        bottom:0;
        left:0;
        right:0;*/
        /*border-top: 1px solid #EBEBEB;*/
        height:20px;
    }

    #toggleBtn
    {    
        /*float: right;
        margin: 0;
        padding: 1px 0 0 0;*/
        position:absolute;
        top:1px;
        
    }
    
    #toggleSpan
    {
        background-color: White;
        position:absolute;
        top:1px;
    }
    
    .OpenedSpan
    {
        right:1px;
    }
    
    .ClosedSpan
    {
        right:-25px; 
    }
    
    #toggleSpan2
    {
        background-color: White;
        position:absolute;
        right:0;     
        /*right:16px;    /*scroll bar*/ 
    }
    
    .OpenedSpan2
    {
        bottom:2px;
    }
    
    .ClosedSpan2
    {
        bottom:-25px; 
    }
    
    
    #toggleBtn2
    {   
        position:absolute;
        bottom:0;
        /*right:0; */
        /*float: right;
        margin: 0;
        padding: 1px 0 0 0;
        */
    }
    
    #toggleSpan3
    {
        background-color: White;
        position:absolute;
        right:0;    
        /*right:16px;    /*scroll bar*/
    }
    
    .OpenedSpan3
    {
        top:1px; 
    }
    
    .ClosedSpan3
    {
        top:-25px;
    }
    
    
    #toggleBtn3
    {   
        position:absolute;
        bottom:0;
        /*right:0; */
        /*float: right;
        margin: 0;
        padding: 1px 0 0 0;
        */
    }
    
    #sliderbox 
    {
        /*position:fixed;*/
        /*left:0;
        top:0;
        bottom:0;*/
        border: 1px solid #EBEBEB;
        width:700px;
        height:600px;
        background-color: White;
        overflow-y:auto;
    }
    
    #sliderbox2 
    {
        /*position:fixed;*/
        /*left:0;
        top:0;
        bottom:0;*/
        border: 1px solid #EBEBEB;
        width:1310px;
        height:130px;
        background-color: White;
    }
    
    #sliderbox3 
    {
        /*position:fixed;*/
        /*left:0;
        top:0;
        bottom:0;*/
        border: 1px solid #EBEBEB;
        width:1310px;
        height:260px;
        background-color: White;
    }
    
    .Opened
    {
        background: no-repeat url('../../Content/Images/arrow_left.png') 0 0;
        /*right:0; */
    }
    
    .Closed
    {
        background: no-repeat url('../../Content/Images/arrow_right.png') 0 0;
        /*right:-25px;*/ 
    }
    
    .Opened2
    {
        background: no-repeat url('../../Content/Images/arrow_top.png') 0 0;
    }
    
    .Closed2
    {
        background: no-repeat url('../../Content/Images/arrow_bottom.png') 0 0;
    }
    
    .Opened3
    {
        background: no-repeat url('../../Content/Images/arrow_bottom.png') 0 0;
    }
    
    .Closed3
    {
        background: no-repeat url('../../Content/Images/arrow_top.png') 0 0;
    }
    
    #searchForm
    {
        /*display:none;*/
    }
    
    #SearchResults
    {
        /*display:none;*/
    }

    #StatsChart
    {
    display:none;
    }
    
    .table_search input[type="text"] , .table_search input[type="datetime"]  , .table_search input[type="number"]
    {
        width:90px;
        
    }
    
    .table_search input, .table_search select
    {
        font-size:13px;
    }
    
    .ParamTable tr td
    {
        padding: 0 3px;
    }
    
    .table_search 
    {
        padding: 0 3px;
        font-size:13px;
        font-weight: bold;
    }
    
    #SearchButton
    {
        width:88px;
        height:88px;
    }
    
    .MainTable
    {
        margin: 0 10px 0 10px;
    }
    
    div.geoxml3_infowindow > h3 
    {
        margin:4px 0;
    }
    

    </style>

    <script type="text/javascript" src="../../Scripts/Utils.js"></script>

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script src="../../Scripts/google-maps-3-vs-1-0.js" type="text/javascript"></script>

     <script src="../../Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
     <!-- <script src="../../Scripts/knockout-2.2.1.js" type="text/javascript"></script> -->

     <!--<script src="../../Scripts/jquery.tmpl.min.js" type="text/javascript"></script>-->

     <script src="../../Scripts/knockout-2.3.0.js" type="text/javascript"></script>

     <!--<script src="../../Scripts/knockout.simpleGrid.js" type="text/javascript"></script>-->

     <script src="../../Scripts/highcharts.js" type="text/javascript"></script>
     

     <script src="../../Scripts/aes.js" type="text/javascript"></script>
     <script src="../../Scripts/enc-base64-min.js" type="text/javascript"></script>

     <script type="text/javascript" src="../../Scripts/geoxml3.js"></script>

     <script src="../../Scripts/Location.js" type="text/javascript"></script>


    <script type="text/javascript">

        function mydump(arr, level) {
            var dumped_text = "";
            if (!level) level = 0;

            var level_padding = "";
            for (var j = 0; j < level + 1; j++) level_padding += "    ";

            if (typeof (arr) == 'object') {
                for (var item in arr) {
                    var value = arr[item];

                    if (typeof (value) == 'object') {
                        dumped_text += level_padding + "'" + item + "' ...\n";
                        dumped_text += mydump(value, level + 1);
                    } else {
                        dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
                    }
                }
            } else {
                dumped_text = "===>" + arr + "<===(" + typeof (arr) + ")";
            }
            return dumped_text;
        }



        function GetAntiForgeryToken() {
            return encodeURIComponent($('input[name=__RequestVerificationToken]').val());
        }


        window.onresize = function () {
            var tailles = viewport();
            $("#sliderbox").css("height", (tailles.height - 130) + 'px');
            $("#sliderbox2").css("width", tailles.width + "px");
            $("#sliderbox3").css("width", tailles.width + "px");

            $("#maincontainer").css("height", (tailles.height - 35) + 'px');
        };

        function viewport() {
            var e = window, a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }
            return { width: e[a + 'Width'], height: e[a + 'Height'] }
        }

        

        function SliderBox(controlDiv, map) {

            var control = this;
            control.isOpen = false;

            var tailles = viewport();

            var box = document.createElement('div');
            box.id = 'sliderbox';
            //box.style.minHeight = '100%';
            //box.style.height = '100%';
            //box.style.width = '300px';
            box.style.height = (tailles.height - 390) + 'px';
            //box.style.opacity = '0.9';
            //box.style.backgroundColor = 'white';
            //box.style.position = 'absolute';
            box.style.marginLeft = '-703px';
            var box2 = document.createElement('div');
            box2.id = 'SearchResultsBox';

            //box2.innerHTML = document.getElementById("SearchResults").innerHTML;
            box2.appendChild(document.getElementById("SearchResults"));

            //document.getElementById("SearchResults").innerHTML = "";

            box.appendChild(box2);
            controlDiv.appendChild(box);

            var toggleSpan = document.createElement('span');
            toggleSpan.id = 'toggleSpan';
            toggleSpan.className = 'ClosedSpan';
            toggleSpan.style.height = '25px';
            toggleSpan.style.width = '25px';

            var toggleBtn = document.createElement('span');
            toggleBtn.id = 'toggleBtn';
            toggleBtn.style.height = '25px';
            toggleBtn.style.width = '25px';
            toggleBtn.className = 'Closed';
            //toggleBtn.style.display = 'inline';
            //toggleBtn.style.position = 'relative';
            //toggleBtn.style.top = '0px';
            //toggleBtn.style.right = '-40px';
            //toggleBtn.style.backgroundColor = 'white';
            //toggleBtn.type = 'button';
            //toggleBtn.value = 'Close';
            toggleSpan.appendChild(toggleBtn);
            box.appendChild(toggleSpan);

            $(document).on('click', '#toggleBtn', function () {
                if (control.isOpen) {

                    $("#sliderbox").animate({
                        "marginLeft": "-=703px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#SearchResultsBox").css("display", "none");
                    control.isOpen = false;
                    //toggleBtn.value = 'Open';
                    toggleBtn.className = "Closed";
                    toggleSpan.className = "ClosedSpan";
                } else {
                    $("#sliderbox").animate({
                        "marginLeft": "+=703px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#SearchResultsBox").css("display", "block");
                    control.isOpen = true;
                    toggleBtn.className = "Opened";
                    toggleSpan.className = "OpenedSpan";
                    //toggleBtn.value = 'Close';
                };
            });
        }


        function SliderBox2(controlDiv, map) {

            var control = this;
            control.isOpen = false;

            var tailles = viewport();

            var box = document.createElement('div');
            box.id = 'sliderbox2';
            //box.style.minHeight = '100%';
            //box.style.height = '100%';
            box.style.width = tailles.width + "px";
            //box.style.height = '300px';
            //box.style.backgroundColor = 'white';
            //box.style.opacity = '0.9';
            //box.style.position = 'relative';

            box.style.marginTop = '-135px';

            var box2 = document.createElement('div');
            box2.id = 'searchFormBox';

            //box2.innerHTML = document.getElementById("searchForm").innerHTML;
            box2.appendChild(document.getElementById("searchForm"));
            //document.getElementById("searchForm").innerHTML = "";

            box.appendChild(box2);
            controlDiv.appendChild(box);

            var toggleSpan = document.createElement('span');
            toggleSpan.id = 'toggleSpan2';
            toggleSpan.className = 'ClosedSpan2';
            toggleSpan.style.height = '25px';
            toggleSpan.style.width = '25px';


            var toggleBtn = document.createElement('span');
            toggleBtn.id = 'toggleBtn2';
            toggleBtn.style.height = '25px';
            toggleBtn.style.width = '25px';
            toggleBtn.className = 'Closed2';
            //toggleBtn.style.display = 'inline';
            //toggleBtn.style.position = 'relative';
            //toggleBtn.style.top = '0px';
            //toggleBtn.style.right = '-40px';
            //toggleBtn.style.backgroundColor = 'black';
            //toggleBtn.type = 'button';
            //toggleBtn.value = 'Close';
            toggleSpan.appendChild(toggleBtn);
            box.appendChild(toggleSpan);

            $(document).on('click', '#toggleBtn2', function () {
                if (control.isOpen) {

                    $("#sliderbox").css("height", (viewport().height) + 'px');
                    //$("#searchFormBox").slideToggle(300);
                    $("#sliderbox2").animate({
                        "marginTop": "-=135px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#searchFormBox").css("display", "none");
                    control.isOpen = false;
                    //toggleBtn.value = 'Open';
                    toggleBtn.className = "Closed2";
                    toggleSpan.className = "ClosedSpan2";


                } else {
                    $("#sliderbox").css("height", (viewport().height - 130) + 'px');
                    $("#sliderbox2").animate({
                        "marginTop": "+=135px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#searchFormBox").css("display", "block");

                    control.isOpen = true;
                    toggleBtn.className = "Opened2";
                    toggleSpan.className = "OpenedSpan2";
                    
                    //toggleBtn.value = 'Close';
                };
            });
        }


        function SliderBox3(controlDiv, map) {

            var control = this;
            control.isOpen = false;

            var tailles = viewport();

            var box = document.createElement('div');
            box.id = 'sliderbox3';
            //box.style.minHeight = '100%';
            box.style.height = '3px';
            //box.style.width = '300px';
            //box.style.height = '500px';
            //box.style.backgroundColor = 'white';

            box.style.width = tailles.width + "px";
            //box.style.position = 'absolute';


            var box0 = document.createElement('div');
            box0.id = 'statsContainer';
            box0.style.margin = "0 auto";
            box0.style.textAlign = "center";
            box0.style.width = "1210px";
            box0.style.display = "none";

            var box2 = document.createElement('div');
            box2.id = 'statsBox';
            box2.style.minWidth = "400px";
            box2.style.width = "400px";
            box2.style.height = "240px";
            box2.style.margin = "0";
            box2.style.marginLeft = "3px";
            box2.style.direction = "ltr";
            box2.style.styleFloat = "left";
            box2.style.cssFloat = "left";


            var box3 = document.createElement('div');
            box3.id = 'statsBox2';
            box3.style.minWidth = "400px";
            box3.style.width = "400px";
            box3.style.height = "240px";
            box3.style.margin = "0";
            box3.style.marginLeft = "3px";
            box3.style.direction = "ltr";
            box3.style.styleFloat = "left";
            box3.style.cssFloat = "left";

            var box4 = document.createElement('div');
            box4.id = 'statsBox3';
            box4.style.minWidth = "400px";
            box4.style.width = "400px";
            box4.style.height = "240px";
            box4.style.margin = "0";
            box4.style.marginLeft = "3px";
            box4.style.direction = "ltr";
            box4.style.styleFloat = "left";
            box4.style.cssFloat = "left";

            //box2.innerHTML = document.getElementById("StatsChart").innerHTML;



            box0.appendChild(box2);
            box0.appendChild(box3);
            box0.appendChild(box4);
            box.appendChild(box0);
            controlDiv.appendChild(box);

            var toggleSpan = document.createElement('span');
            toggleSpan.id = 'toggleSpan3';
            toggleSpan.className = 'ClosedSpan3';
            toggleSpan.style.height = '25px';
            toggleSpan.style.width = '25px';
            //toggleSpan.className = 'Closed3';

            var toggleBtn = document.createElement('span');
            toggleBtn.id = 'toggleBtn3';
            toggleBtn.style.height = '25px';
            toggleBtn.style.width = '25px';
            toggleBtn.className = 'Closed3';

            toggleSpan.appendChild(toggleBtn);
            box.appendChild(toggleSpan);


            


            $(document).on('click', '#toggleBtn3', function () {
                if (control.isOpen) {

                    
                    $("#sliderbox3").animate({
                        "height": "-=243px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#statsContainer").css("display", "none");
                    //$("#statsBox2").css("display", "none");
                    //$("#statsBox3").css("display", "none");
                    $("#sliderbox").css("height", (viewport().height) + 'px');
                    control.isOpen = false;
                    //toggleBtn.value = 'Open';
                    toggleBtn.className = "Closed3";
                    toggleSpan.className = "ClosedSpan3";

                } else {
                    
                    $("#sliderbox3").animate({
                        "height": "+=243px"
                    }, {
                        duration: 300,
                        step: function () {
                            google.maps.event.trigger(map, 'resize');
                        }
                    });
                    $("#statsContainer").css("display", "block");
                    //$("#statsBox2").css("display", "block");
                    //$("#statsBox3").css("display", "block");
                    $("#sliderbox").css("height", (viewport().height - 260) + 'px');
                    control.isOpen = true;
                    toggleBtn.className = "Opened3";
                    toggleSpan.className = "OpenedSpan3";

                    //toggleBtn.value = 'Close';
                };
            });
        }

//        function SliderBox4(controlDiv, map) {

//            var control = this;
//            control.isOpen = true;

//            var box = document.createElement('div');
//            box.id = 'sliderbox4';
//            box.style.minHeight = '100%';
//            //box.style.height = '100%';
//            box.style.width = '300px';
//            box.style.height = '500px';
//            box.style.backgroundColor = 'white';
//            //box.style.position = 'absolute';
//            controlDiv.appendChild(box);

//            var toggleBtn = document.createElement('span');
//            toggleBtn.id = 'toggleBtn4';
//            toggleBtn.style.height = '25px';
//            toggleBtn.style.width = '25px';
//            toggleBtn.className = 'Opened4';
//            //toggleBtn.style.display = 'inline';
//            //toggleBtn.style.position = 'relative';
//            //toggleBtn.style.top = '0px';
//            //toggleBtn.style.right = '-40px';
//            //toggleBtn.style.backgroundColor = 'white';
//            //toggleBtn.type = 'button';
//            //toggleBtn.value = 'Close';
//            box.appendChild(toggleBtn);

//            $(document).on('click', '#toggleBtn4', function () {
//                if (control.isOpen) {

//                    $("#sliderbox4").animate({
//                        "marginLeft": "-=275px"
//                    }, {
//                        duration: 300,
//                        step: function () {
//                            google.maps.event.trigger(map, 'resize');
//                        }
//                    });
//                    control.isOpen = false;
//                    //toggleBtn.value = 'Open';
//                    toggleBtn.className = "Closed4";
//                } else {
//                    $("#sliderbox4").animate({
//                        "marginLeft": "+=275px"
//                    }, {
//                        duration: 300,
//                        step: function () {
//                            google.maps.event.trigger(map, 'resize');
//                        }
//                    });
//                    control.isOpen = true;
//                    toggleBtn.className = "Opened4";
//                    //toggleBtn.value = 'Close';
//                };
//            });
//        }

        map = null;
        markers = [];

        function initialize() {
            var mapOptions = {
                zoom: 10,
                center: new google.maps.LatLng(31.7733147, 34.888),
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                panControl: true,
                panControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM 
                },
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.LARGE,
                    position: google.maps.ControlPosition.RIGHT_BOTTOM 
                },
                scaleControl: true,
                scaleControlOptions: {
                    position: google.maps.ControlPosition.BOTTOM_LEFT
                },
                streetViewControl: true,
                streetViewControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM 
                },
                mapTypeControl: true,
                mapTypeControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM 
                }
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

            /*var ctaLayer = new google.maps.KmlLayer({
                url: 'http://127.0.0.1:3538/Home/LocationLayer'
            });
            ctaLayer.setMap(map);
            */
            //var token = '__RequestVerificationToken=' + GetAntiForgeryToken();
            //var KmlUrl = '/Home/LocationLayer?Page=@Model.Page&' + token + '&api_key=FEWRRHVCX1234534JGHUYi&zone=@Model.zone&ville=@Model.ville&quartier=@Model.quartier&typebien=@Model.typebien&nombrechambremin=@Model.nombrechambremin&nombrechambremax=@Model.nombrechambremax&prixmin=@Model.prixmin&prixmax=@Model.prixmax&etagemin=@Model.etagemin&etagemax=@Model.etagemax&superficiemin=@Model.superficiemin&superficiemax=@Model.superficiemax&meublee=@Model.meublee&garage=@Model.garage&ascenseur=@Model.ascenseur&bareaux=@Model.bareaux&climatisation=@Model.climatisation&chambreforte=@Model.chambreforte&balcon=@Model.balcon&renovee=@Model.renovee&cave=@Model.cave&acceshandicape=@Model.acceshandicape&animauxdomestique=@Model.animauxdomestique&plusieursresidents=@Model.plusieursresidents&entreeimmediate=@Model.entreeimmediate&entreeflexible=@Model.entreeflexible&dateentree=@Model.dateentree&SearchButton=@Model.SearchButton';
            //var KmlUrl = '../../Scripts/KML_Samples.kml';

//            var xmlhttp = new XMLHttpRequest();
//            xmlhttp.open("GET", KmlUrl, false);
//            //xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//            xmlhttp.send(null);

            //var myParser = new geoXML3.parser({ map: map });
            //myParser.parse(KmlUrl); 


            var sliderBoxDiv = document.createElement('div');
            var sliderBoxControl = new SliderBox(sliderBoxDiv, map);

            sliderBoxDiv.index = -500;
            map.controls[google.maps.ControlPosition.LEFT].push(sliderBoxDiv);


            var sliderBoxDiv2 = document.createElement('div');
            var sliderBoxControl2 = new SliderBox2(sliderBoxDiv2, map);

            sliderBoxDiv2.index = -1000;
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(sliderBoxDiv2);


            var sliderBoxDiv3 = document.createElement('div');
            var sliderBoxControl3 = new SliderBox3(sliderBoxDiv3, map);

            sliderBoxDiv3.index = -1500;
            map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(sliderBoxDiv3);




//            var sliderBoxDiv4 = document.createElement('div');
//            var sliderBoxControl4 = new SliderBox4(sliderBoxDiv4, map);

//            sliderBoxDiv4.index = -2000;
//            map.controls[google.maps.ControlPosition.TOP].push(sliderBoxDiv4);
        }

        google.maps.event.addDomListener(window, 'load', initialize);


        function InitialiseStats() {


            if (document.getElementById("statsContainer") == null) {

                setTimeout('InitialiseStats()', 1000);
                return;
            }

            var colors = Highcharts.getOptions().colors,
            categories = ['MSIE', 'Firefox', 'Chrome', 'Safari', 'Opera'],
            name = 'Browser brands',
            data = [{
                y: 55.11,
                color: colors[0],
                drilldown: {
                    name: 'MSIE versions',
                    categories: ['MSIE 6.0', 'MSIE 7.0', 'MSIE 8.0', 'MSIE 9.0'],
                    data: [10.85, 7.35, 33.06, 2.81],
                    color: colors[0]
                }
            }, {
                y: 21.63,
                color: colors[1],
                drilldown: {
                    name: 'Firefox versions',
                    categories: ['Firefox 2.0', 'Firefox 3.0', 'Firefox 3.5', 'Firefox 3.6', 'Firefox 4.0'],
                    data: [0.20, 0.83, 1.58, 13.12, 5.43],
                    color: colors[1]
                }
            }, {
                y: 11.94,
                color: colors[2],
                drilldown: {
                    name: 'Chrome versions',
                    categories: ['Chrome 5.0', 'Chrome 6.0', 'Chrome 7.0', 'Chrome 8.0', 'Chrome 9.0',
                            'Chrome 10.0', 'Chrome 11.0', 'Chrome 12.0'],
                    data: [0.12, 0.19, 0.12, 0.36, 0.32, 9.91, 0.50, 0.22],
                    color: colors[2]
                }
            }, {
                y: 7.15,
                color: colors[3],
                drilldown: {
                    name: 'Safari versions',
                    categories: ['Safari 5.0', 'Safari 4.0', 'Safari Win 5.0', 'Safari 4.1', 'Safari/Maxthon',
                            'Safari 3.1', 'Safari 4.1'],
                    data: [4.55, 1.42, 0.23, 0.21, 0.20, 0.19, 0.14],
                    color: colors[3]
                }
            }, {
                y: 2.14,
                color: colors[4],
                drilldown: {
                    name: 'Opera versions',
                    categories: ['Opera 9.x', 'Opera 10.x', 'Opera 11.x'],
                    data: [0.12, 0.37, 1.65],
                    color: colors[4]
                }
            }];

            function setChart(name, categories, data, color) {
                chart.xAxis[0].setCategories(categories, false);
                chart.series[0].remove(false);
                chart.addSeries({
                    name: name,
                    data: data,
                    color: color || 'white'
                }, false);
                chart.redraw();
            }

            var chart = $('#statsBox').highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Browser market share, April, 2011'
                },
                xAxis: {
                    categories: categories
                },
                yAxis: {
                    title: {
                        text: 'Total percent market share'
                    }
                },
                plotOptions: {
                    column: {
                        cursor: 'pointer',
                        point: {
                            events: {
                                click: function () {
                                    var drilldown = this.drilldown;
                                    if (drilldown) { // drill down
                                        setChart(drilldown.name, drilldown.categories, drilldown.data, drilldown.color);
                                    } else { // restore
                                        setChart(name, categories, data);
                                    }
                                }
                            }
                        },
                        dataLabels: {
                            enabled: true,
                            color: colors[0],
                            style: {
                                fontWeight: 'bold'
                            },
                            formatter: function () {
                                return this.y + '%';
                            }
                        }
                    }
                },
                tooltip: {
                    formatter: function () {
                        var point = this.point,
                        s = this.x + ':<b>' + this.y + '% market share</b><br/>';
                        if (point.drilldown) {
                            s += 'Click to view ' + point.category + ' versions';
                        } else {
                            s += 'Click to return to browser brands';
                        }
                        return s;
                    }
                },
                series: [{
                    name: name,
                    data: data,
                    color: 'white'
                }],
                exporting: {
                    enabled: false
                }
            })
        .highcharts(); // return chart


            

            $('#statsBox2').highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false
                },
                title: {
                    text: 'Browser market shares at a specific website, 2010'
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            color: '#000000',
                            connectorColor: '#000000',
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %'
                        }
                    }
                },
                series: [{
                    type: 'pie',
                    name: 'Browser share',
                    data: [
                        ['Firefox', 45.0],
                        ['IE', 26.8],
                        {
                            name: 'Chrome',
                            y: 12.8,
                            sliced: true,
                            selected: true
                        },
                        ['Safari', 8.5],
                        ['Opera', 6.2],
                        ['Others', 0.7]
                    ]
                }]
            });


            $('#statsBox3').highcharts({
                title: {
                    text: 'Monthly Average Temperature',
                    x: -20 //center
                },
                xAxis: {
                    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                },
                yAxis: {
                    title: {
                        text: 'Temperature (°C)'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                tooltip: {
                    valueSuffix: '°C'
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'middle',
                    borderWidth: 0
                },
                series: [{
                    name: 'Tokyo',
                    data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
                }, {
                    name: 'New York',
                    data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
                }, {
                    name: 'Berlin',
                    data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
                }, {
                    name: 'London',
                    data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
                }]
            });
        }


        function toggleBounce(markerindex) {

            if (typeof (markers[markerindex]) != "undefined") {

                if (markers[markerindex].getAnimation() != null) {
                    markers[markerindex].setAnimation(null);
                    markers[markerindex].infoWindow.close();
                } else {
                    markers[markerindex].setAnimation(google.maps.Animation.BOUNCE);
                    markers[markerindex].infoWindow.open(map, markers[markerindex]);
                }
            }
        }


//        window.setInterval(function () {

//            if (document.getElementById("statsContainer") != null) {
//                InitialiseStats();
//            }
        //        }, 1000);

        $(document).ready(function () {

            //            setTimeout(function () {
            //                ko.applyBindings(new LocationViewModel());
            //            }, 1000);

            viewModel = new MyViewModel();

            setTimeout(function () {
                ko.applyBindings(viewModel);

                //$('#toggleBtn').trigger('click');
                //$('#toggleBtn2').trigger('click');
                //$('#toggleBtn3').trigger('click');

            }, 1000);

        });

        window.onload = function () {

            var tailles = viewport();
            $("#maincontainer").css("height", (tailles.height - 35) + 'px');

            InitialiseStats();


            //TestApi();

            //TestApi2();

            //setTimeout(function () {
            //    ko.applyBindings(new LocationViewModel());
            //}, 1000);

            //            setTimeout(function () {
            //                var markers = appartementsmarkers;

            //                for (var i = 0; i < markers.length; i++) {
            //                    if (markers[i].get("id") == "239") {
            //                        alert("OK");
            //                        alert(console.log(markers[i]));
            //                        break;
            //                    }
            //                }
            //            }, 5000);

            //var token = '__RequestVerificationToken=' + GetAntiForgeryToken();
            //var KmlUrl = '/Home/LocationLayer?' + token + '&api_key=FEWRRHVCX1234534JGHUYi&zone=@Model.zone&ville=@Model.ville&quartier=@Model.quartier&typebien=@Model.typebien&nombrechambremin=@Model.nombrechambremin&nombrechambremax=@Model.nombrechambremax&prixmin=@Model.prixmin&prixmax=@Model.prixmax&etagemin=@Model.etagemin&etagemax=@Model.etagemax&superficiemin=@Model.superficiemin&superficiemax=@Model.superficiemax&meublee=@Model.meublee&garage=@Model.garage&ascenseur=@Model.ascenseur&bareaux=@Model.bareaux&climatisation=@Model.climatisation&chambreforte=@Model.chambreforte&balcon=@Model.balcon&renovee=@Model.renovee&cave=@Model.cave&acceshandicape=@Model.acceshandicape&animauxdomestique=@Model.animauxdomestique&plusieursresidents=@Model.plusieursresidents&entreeimmediate=@Model.entreeimmediate&entreeflexible=@Model.entreeflexible&dateentree=@Model.dateentree&SearchButton=%D7%97%D7%A4%D7%A9';
            //var KmlUrl = '../../Scripts/KML_Samples.kml';

            //var xmlhttp = new XMLHttpRequest();
            //xmlhttp.open("GET", KmlUrl, false);
            //xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            //xmlhttp.send(null);
            

        };


        /*window.onload = function () {

            // Here's my data model
            var ViewModel = function (first, last) {
                this.firstName = ko.observable(first);
                this.lastName = ko.observable(last);

                this.fullName = ko.computed(function () {
                    // Knockout tracks dependencies automatically. It knows that fullName depends on firstName and lastName, because these get called when evaluating fullName.
                    return this.firstName() + " " + this.lastName();
                }, this);
            };

            ko.applyBindings(new ViewModel("Planet", "Earth")); // This makes Knockout get to work

        };

       /* $(function () {
        $('#statsBox').highcharts({
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Historic World Population by Region'
            },
            subtitle: {
                text: 'Source: Wikipedia.org'
            },
            xAxis: {
                categories: ['Africa', 'America', 'Asia', 'Europe', 'Oceania'],
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Population (millions)',
                    align: 'high'
                },
                labels: {
                    overflow: 'justify'
                }
            },
            tooltip: {
                valueSuffix: ' millions'
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'top',
                x: -100,
                y: 100,
                floating: true,
                borderWidth: 1,
                backgroundColor: '#FFFFFF',
                shadow: true
            },
            credits: {
                enabled: false
            },
            series: [{
                name: 'Year 1800',
                data: [107, 31, 635, 203, 2]
            }, {
                name: 'Year 1900',
                data: [133, 156, 947, 408, 6]
            }, {
                name: 'Year 2008',
                data: [973, 914, 4054, 732, 34]
            }]
        });
    });*/


        //function Toggle(trid) {
        //    document.getElementById(trid).style.display = "table-row";
        //}

    </script>
  </head>
  <body dir="rtl">

  <div id="header">
  
  </div>

  <input id="antiForgeryToken" type="hidden" value="@GetAntiForgeryToken()" />

  @Html.AntiForgeryToken()


  <div id="searchForm">


  @using (Html.BeginForm("Map", "Home", FormMethod.Get))
  {

    @Html.ValidationSummary(false)
    <div align="center">
    <table class="MainTable">
    <tr>
    <td>
<table  class="table_search" style="" cellspacing="0" cellpadding="0">
    <tbody>
        <tr>
            <td>
                <table class="ParamTable"  style="" cellspacing="1" cellpadding="0">
                    <tbody>
                        <tr>
                            <td align="right" id="td_area" style="width: 140px;" name="td_area">
                                אזור<br />
                               
                                @Html.DropDownListFor(
                                       model => model.zone,
                                       new SelectList(
                                              new List<Object>{ 
                                                   new { value = "" , text = "כל האיזורים"  },
                                                   new { value = "אזור צפון" , text = "אזור צפון" },
                                                   new { value = "חיפה וחוף הכרמל" , text = "חיפה וחוף הכרמל" },
                                                   new { value = "קריות" , text = "קריות" },
                                                   new { value = "עכו - נהריה" , text = "עכו - נהריה" },
                                                   new { value = "גליל ועמקים" , text = "גליל ועמקים" },
                                                   new { value = "טבריה והסביבה" , text = "טבריה והסביבה" },
                                                   new { value = "עמק יזרעאל" , text = "עמק יזרעאל" },
                                                   new { value = "כרמיאל והסביבה" , text = "כרמיאל והסביבה" },
                                                   new { value = "מושבים בצפון" , text = "מושבים בצפון" },
                                                   new { value = "אזור השרון והסביבה" , text = "אזור השרון והסביבה" },
                                                   new { value = "זכרון - בנימינה" , text = "זכרון - בנימינה" },
                                                   new { value = "חדרה וישובי עמק חפר" , text = "חדרה וישובי עמק חפר" },
                                                   new { value = "פרדס חנה - כרכור" , text = "פרדס חנה - כרכור" },
                                                   new { value = "יישובי השומרון" , text = "יישובי השומרון" },
                                                   new { value = "נתניה והסביבה" , text = "נתניה והסביבה" },
                                                   new { value = "קיסריה והסביבה" , text = "קיסריה והסביבה" },
                                                   new { value = "רמת השרון - הרצליה" , text = "רמת השרון - הרצליה" },
                                                   new { value = "רעננה - כפר סבא" , text = "רעננה - כפר סבא" },
                                                   new { value = "הוד השרון והסביבה" , text = "הוד השרון והסביבה" },
                                                   new { value = "מושבים בשרון" , text = "מושבים בשרון" },
                                                   new { value = "אזור המרכז" , text = "אזור המרכז" },
                                                   new { value = "תל אביב" , text = "תל אביב" },
                                                   new { value = "תל אביב - צפון" , text = "תל אביב - צפון" },
                                                   new { value = "תל אביב - מרכז" , text = "תל אביב - מרכז" },
                                                   new { value = "תל אביב - דרום" , text = "תל אביב - דרום" },
                                                   new { value = "בקעת אונו" , text = "בקעת אונו" },
                                                   new { value = "חולון - בת ים" , text = "חולון - בת ים" },
                                                   new { value = "פתח תקוה והסביבה" , text = "פתח תקוה והסביבה" },
                                                   new { value = "ראשל\"צ והסביבה" , text = "ראשל\"צ והסביבה" },
                                                   new { value = "רמת גן - גבעתיים" , text = "רמת גן - גבעתיים" },
                                                   new { value = "ראש העין והסביבה" , text = "ראש העין והסביבה" },
                                                   new { value = "מושבים במרכז" , text = "מושבים במרכז" },
                                                   new { value = "ירושלים והסביבה" , text = "ירושלים והסביבה" },
                                                   new { value = "מודיעין והסביבה" , text = "מודיעין והסביבה" },
                                                   new { value = "בית שמש והסביבה" , text = "בית שמש והסביבה" },
                                                   new { value = "מושבים באזור ירושלים" , text = "מושבים באזור ירושלים" },
                                                   new { value = "אזור השפלה והסביבה" , text = "אזור השפלה והסביבה" },
                                                   new { value = "נס ציונה - רחובות" , text = "נס ציונה - רחובות" },
                                                   new { value = "אשדוד - אשקלון" , text = "אשדוד - אשקלון" },
                                                   new { value = "רמלה - לוד" , text = "רמלה - לוד" },
                                                   new { value = "גדרה יבנה והסביבה" , text = "גדרה יבנה והסביבה" },
                                                   new { value = "מושבים בשפלה" , text = "מושבים בשפלה" },
                                                   new { value = "אזור דרום" , text = "אזור דרום" },
                                                   new { value = "באר שבע והסביבה" , text = "באר שבע והסביבה" },
                                                   new { value = "אילת והערבה" , text = "אילת והערבה" },
                                                   new { value = "מושבים בדרום" , text = "מושבים בדרום" },
                                                   new { value = "חו\"ל" , text = "חו\"ל" }
                                                },
                                              "value",
                                              "text",
                                            Model.zone
                   ), new { data_bind = "value: zone, event: { change: resetPaging }" }
                                    )

                                @Html.ValidationMessageFor(model => model.zone)
                            </td>
                            <td align="right" id="td_city" valign="top" style="width: 95px;" name="td_city">

                                        עיר\ישוב<br />
                                        @Html.TextBoxFor(model => model.ville, new { data_bind = "value: ville, event: { change: resetPaging }" })

                                        @Html.ValidationMessageFor(model => model.ville)

                            </td>
                            <td align="right" id="td_hood" valign="top" style="width: 86px;" name="td_hood">

                                        שכונה<br />
                                         @Html.TextBoxFor(model => model.quartier, new { data_bind = "value: quartier, event: { change: resetPaging }" })

                                         @Html.ValidationMessageFor(model => model.quartier)
 
                            </td>
                            <td align="right" id="td_homeType" style="width: 132px;" name="td_homeType">
                                סוג נכס<br />

                          @Html.DropDownListFor(
                           model => model.typebien,
                           new SelectList(
                                  new List<Object>{ 
                                       new { value = "" , text = "כל הסוגים"  },
                                       new { value = "גג/פנטהאוזים" , text = "גג/פנטהאוזים" },
                                       new { value = "דו משפחתיים" , text = "דו משפחתיים" },
                                       new { value = "דופלקסים" , text = "דופלקסים" },
                                       new { value = "דירות" , text = "דירות" },
                                       new { value = "דירות גן" , text = "דירות גן" },
                                       new { value = "דירות לתקופות קצרות" , text = "דירות לתקופות קצרות" },
                                       new { value = "דירות נופש" , text = "דירות נופש" },
                                       new { value = "החלפת דירות" , text = "החלפת דירות" },
                                       new { value = "חיפוש נכסים" , text = "חיפוש נכסים" },
                                       new { value = "חניות" , text = "חניות" },
                                       new { value = "טריפלקס" , text = "טריפלקס" },
                                       new { value = "יחידות דיור" , text = "יחידות דיור" },
                                       new { value = "כללי" , text = "כללי" },
                                       new { value = "מבנים ניידים/קרוואן" , text = "מבנים ניידים/קרוואן" },
                                       new { value = "מגרשים" , text = "מגרשים" },
                                       new { value = "מחסנים" , text = "מחסנים" },
                                       new { value = "מרתפים/פרטרים" , text = "מרתפים/פרטרים" },
                                       new { value = "משק חקלאי" , text = "משק חקלאי" },
                                       new { value = "סטודיו/לופט" , text = "סטודיו/לופט" },
                                       new { value = "פרטיים/קוטג'ים" , text = "פרטיים/קוטג'ים" },
                                       new { value = "קבוצת רכישה" , text = "קבוצת רכישה" }
                              
                                    },
                                  "value",
                                  "text",
                             Model.typebien
           ), new { data_bind = "value: typebien, event: { change: resetPaging }" }
                        )

                        @Html.ValidationMessageFor(model => model.typebien)
                                
                            </td>
                            <td align="right" id="td_rooms" style="width: 55px;">
                                מחדרים<br />

                                @Html.DropDownListFor(
                                    model => model.nombrechambremin,
                                       new SelectList(
                                              new List<Object>{ 
                                                   new { value = "" , text = "הכל"  },
                                                   new { value = "1" , text = "1" },
                                                   new { value = "1.5" , text = "1.5" },
                                                   new { value = "2" , text = "2" },
                                                   new { value = "2.5" , text = "2.5" },
                                                   new { value = "3" , text = "3" },
                                                   new { value = "3.5" , text = "3.5" },
                                                   new { value = "4" , text = "4" },
                                                   new { value = "4.5" , text = "4.5" },
                                                   new { value = "5" , text = "5" },
                                                   new { value = "5.5" , text = "5.5" },
                                                   new { value = "6" , text = "6" },
                                                   new { value = "7" , text = "7" },
                                                   new { value = "8" , text = "8" },
                                                   new { value = "9" , text = "9" },
                                                   new { value = "10" , text = "10" },
                                                   new { value = "11" , text = "11" },
                                                   new { value = "12" , text = "12" }
                                                },
                                              "value",
                                              "text",
                                        Model.nombrechambremin
                                       )
                , new { data_bind = "value: nombrechambremin, event: { change: resetPaging }" }
                                    )

                            @Html.ValidationMessageFor(model => model.nombrechambremin)
                            </td>
                            <td align="right" id="td_until_rooms" style="width: 67px;">
                            עד חדרים<br />

                                @Html.DropDownListFor(
                                    model => model.nombrechambremax,
                                       new SelectList(
                                              new List<Object>{ 
                                                   new { value = "" , text = "הכל"  },
                                                   new { value = "1" , text = "1" },
                                                   new { value = "1.5" , text = "1.5" },
                                                   new { value = "2" , text = "2" },
                                                   new { value = "2.5" , text = "2.5" },
                                                   new { value = "3" , text = "3" },
                                                   new { value = "3.5" , text = "3.5" },
                                                   new { value = "4" , text = "4" },
                                                   new { value = "4.5" , text = "4.5" },
                                                   new { value = "5" , text = "5" },
                                                   new { value = "5.5" , text = "5.5" },
                                                   new { value = "6" , text = "6" },
                                                   new { value = "7" , text = "7" },
                                                   new { value = "8" , text = "8" },
                                                   new { value = "9" , text = "9" },
                                                   new { value = "10" , text = "10" },
                                                   new { value = "11" , text = "11" },
                                                   new { value = "12" , text = "12" }
                                                },
                                              "value",
                                              "text",
                                        Model.nombrechambremax
                                       )
                , new { data_bind = "value: nombrechambremax, event: { change: resetPaging }" }
                                    )

                                @Html.ValidationMessageFor(model => model.nombrechambremax)
                            </td>
                            <td align="right" style="width: 45px;">
                                ממחיר<br />
                                @Html.TextBoxFor(model => model.prixmin, new { data_bind = "value: prixmin, event: { change: resetPaging }" })

                                @Html.ValidationMessageFor(model => model.prixmin)
                            </td>
                            <td align="right" style="width: 43px;">
                                עד מחיר<br />
                                 @Html.TextBoxFor(model => model.prixmax, new { data_bind = "value: prixmax, event: { change: resetPaging }" })

                                 @Html.ValidationMessageFor(model => model.prixmax)
                            </td>
                            <td align="right" style="width: 55px;">
                                מקומה<br />
                             
                               @Html.DropDownListFor(
                                     model => model.etagemin,
                                           new SelectList(
                                                  new List<Object>{ 
                                                       new { value = "" , text = "הכל"  },
                                                       new { value = "0" , text = "קרקע" },
                                                       new { value = "1" , text = "1" },
                                                       new { value = "2" , text = "2" },
                                                       new { value = "3" , text = "3" },
                                                       new { value = "4" , text = "4" },
                                                       new { value = "5" , text = "5" },
                                                       new { value = "6" , text = "6" },
                                                       new { value = "7" , text = "7" },
                                                       new { value = "8" , text = "8" },
                                                       new { value = "9" , text = "9" },
                                                       new { value = "10" , text = "10" },
                                                       new { value = "11" , text = "11" },
                                                       new { value = "12" , text = "12" },
                                                       new { value = "13" , text = "13" },
                                                       new { value = "14" , text = "14" },
                                                       new { value = "15" , text = "15" }
                                                    },
                                                  "value",
                                                  "text",
                                    Model.etagemin
                                           )
                     , new { data_bind = "value: etagemin, event: { change: resetPaging }" }
                                        )

                                @Html.ValidationMessageFor(model => model.etagemin)
                            </td>
                            <td align="right" style="width: 55px;">
                                עד קומה<br />
                                @Html.DropDownListFor(
                                     model => model.etagemax,
                                           new SelectList(
                                                  new List<Object>{ 
                                                      new { value = "" , text = "הכל"  },
                                                       new { value = "0" , text = "קרקע" },
                                                       new { value = "1" , text = "1" },
                                                       new { value = "2" , text = "2" },
                                                       new { value = "3" , text = "3" },
                                                       new { value = "4" , text = "4" },
                                                       new { value = "5" , text = "5" },
                                                       new { value = "6" , text = "6" },
                                                       new { value = "7" , text = "7" },
                                                       new { value = "8" , text = "8" },
                                                       new { value = "9" , text = "9" },
                                                       new { value = "10" , text = "10" },
                                                       new { value = "11" , text = "11" },
                                                       new { value = "12" , text = "12" },
                                                       new { value = "13" , text = "13" },
                                                       new { value = "14" , text = "14" },
                                                       new { value = "15" , text = "15" }
                                                    },
                                                  "value",
                                                  "text",
                                    Model.etagemax
                                           )
                    , new { data_bind = "value: etagemax, event: { change: resetPaging }" }
                                        )

                            @Html.ValidationMessageFor(model => model.etagemax)
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <table class="ParamTable" style="" cellspacing="1" cellpadding="0">
                                                    <tbody>
                                                        <tr>
                                                            <td align="right" width="40" valign="top">
                                                                ממ"ר<br>
                                                                @Html.TextBoxFor(model => model.superficiemin, new { data_bind = "value: superficiemin, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.superficiemin)
                                                            </td>
                                                            <td align="right" width="40" valign="top">
                                                                עד מ"ר<br>
                                                                  @Html.TextBoxFor(model => model.superficiemax, new { data_bind = "value: superficiemax, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.superficiemax)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                ריהוט<br/>
                                                                 @Html.CheckBoxFor(model => model.meublee, new { data_bind = "checked: meublee, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.meublee)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                חניה<br />
                                                                @Html.CheckBoxFor(model => model.garage, new { data_bind = "checked: garage, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.garage)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                מעלית<br />
                                                                  @Html.CheckBoxFor(model => model.ascenseur, new { data_bind = "checked: ascenseur, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.ascenseur)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                סורגים<br />
                                                                @Html.CheckBoxFor(model => model.bareaux, new { data_bind = "checked: bareaux, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.bareaux)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                מיזוג<br />
                                                                @Html.CheckBoxFor(model => model.climatisation, new { data_bind = "checked: climatisation, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.climatisation)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                ממ"ד<br />
                                                                @Html.CheckBoxFor(model => model.chambreforte, new { data_bind = "checked: chambreforte, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.chambreforte)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                מרפסת<br />
                                                                @Html.CheckBoxFor(model => model.balcon, new { data_bind = "checked: balcon, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.balcon)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                משופצת<br />
                                                                @Html.CheckBoxFor(model => model.renovee, new { data_bind = "checked: renovee, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.renovee)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                מחסן<br />
                                                                @Html.CheckBoxFor(model => model.cave, new { data_bind = "checked: renovee, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.cave)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                גישה לנכים<br />
                                                                @Html.CheckBoxFor(model => model.acceshandicape, new { data_bind = "checked: acceshandicape, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.acceshandicape)
                                                            </td>
                                                            <td  align="center" valign="top">
                                                                חיות<br />
                                                                @Html.CheckBoxFor(model => model.animauxdomestique, new { data_bind = "checked: animauxdomestique, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.animauxdomestique)
                                                            </td>
                                                            <td  align="center" valign="top">
                                                                מ.שותפים<br />
                                                                @Html.CheckBoxFor(model => model.plusieursresidents, new { data_bind = "checked: plusieursresidents, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.plusieursresidents)
                                                            </td>
                                                            <td align="center" valign="top">
                                                                כניסה מיידית<br />
                                                                @Html.CheckBoxFor(model => model.entreeimmediate, new { data_bind = "checked: entreeimmediate, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.entreeimmediate)
                                                            </td>
                                                            <td  align="center" valign="top">
                                                                כניסה גמיש<br />
                                                                @Html.CheckBoxFor(model => model.entreeflexible, new { data_bind = "checked: entreeflexible, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.entreeflexible)
                                                            </td>
                                                            <td align="right" id="td_EnterDate" valign="top" name="td_EnterDate">
                                                                כניסה מתאריך<br />
                                                                
                                                                @Html.TextBoxFor(model => model.dateentree, new { data_bind = "value: dateentree, event: { change: resetPaging }" })

                                                                @Html.ValidationMessageFor(model => model.dateentree)
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
     </tbody>
</table>
</td>
</tr>
  </table>   
  </div>                      


  }



  </div>

  <div id="SearchResults">

    
        <br />
  <table width="100%">

               <tr>
               <td>
  <table cellspacing="5" cellspacing="5">
    <thead>
                <tr>
                <td style="width:20px">
                    <input id="checkmarkerall" onclick="$('.checkmarker').trigger('click');" name="checkmarkerall"  type="checkbox" /> 
                      
				</td>
                <td style="width:94px">
                          <b>  סוג נכס    </b>                      
				</td>
               <td  style="width:35px">
						  <b>   חד' </b> 
				</td>
                <td style="width:85px">
				    	  <b>   ישוב</b> 
						</td>
                <td style="width:150px">
						  <b>   כתובת</b> 
				</td>
                <td style="width:65px">
    						<b> כניסה</b> 
				</td>
                <td  style="width:70px;">
						   <b>  מחיר</b> 
				</td>
                <td style="width:65px;">
					      <b>   תאריך</b> 
						</td>
                </tr>
                </thead>
                 <tbody data-bind="foreach: SearchResults">
                    <tr>
                        <td><input data-bind="event: { change: function() { toggleBounce($index()); } }"  class="checkmarker"  type="checkbox" /></td>
                        <td data-bind="text: typebien()"></td>
                        <td data-bind="text: nombrechambre()"></td>
                        <td data-bind="text: ville()"></td>
                        <td data-bind="text: adresse()"></td>
                        <td data-bind="text: DateEntree()"></td>

                        <td data-bind="text: prix() + ' ₪'"></td>
                        <td data-bind="text: date().substring(0,10)"></td>
                    </tr>    
                </tbody>
               </table>
               </td>
               </tr>
               </table>

               <!--<br />
               <div data-bind='simpleGrid: gridViewModel'> </div>
               <br />-->



                <ul class="pager pager2">
                    <li data-bind="css: {'disabled': !previousPageEnabled()}">
                        <a href="#" data-bind="click: previousPage">Previous</a>
                    </li>
                <!-- ko foreach: Paging -->
                            <li>
                            <a href="#" data-bind="click: function() { $root.goToPage($data); } , css: { selected: $data == $root.Page() }">
                                <span data-bind="text: $data"></span>
                            </a>
                            </li>
                 <!-- /ko -->
                    <li data-bind="css: {'disabled': !nextPageEnabled()}">
                        <a href="#" data-bind="click: nextPage">Next</a>
                    </li>
                 </ul>
                
                <div align="center">
                   <select data-bind="options: availablePerPage, value: PageSize, event: { change: resetPaging } ">
                   </select>
                   <span data-bind="text: recordMessage()"></span>
                </div>

                
  
  </div>

    <div id="maincontainer">

        <div id="map-canvas"></div>

    </div>

    <div data-bind="map:map" ></div>

  </body>
</html>